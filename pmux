#!/bin/bash

# Prefer dtach and fallback to abduco
DTACH=`which dtach` 2>/dev/null
if [ $? -eq 0 ]; then
	export DTACH="${DTACH}"
	export DTACH_OPTS="-e ^a -z -r winch"
else
	DTACH=`which abduco` 2>/dev/null
	if [ $? -eq 0 ]; then
		export DTACH="${DTACH} -e ^a"
		export DTACH_OPTS=""
	else
		echo "Either abduco or dtach must be in the path to use pmux"
		exit 1
	fi
fi

function getSession() {
	local session=
	local count=0

	for f in "${SESSION_DIR}"/*; do
		[ -S "$f" ] || continue

		name=`basename "$f" | sed 's,[0-9]* ,,'`
		printf -v num "%02d" $count

		# Ensure that the session has the correct number in its name in case
		# any sessions have been closed.
		newpath="${SESSION_DIR}/$num $name"
		if [ "$f" != "${newpath}" ]; then
			mv "$f" "${newpath}"
		fi

		if ((count == $1 )); then
			session="$newpath"
		fi
		count=$((count+1))
	done

	echo ${session}
	return $count
}

function renameSession() {
	echo -en "Enter new name: "
	read
	num=`basename "$1" | sed 's,\([0-9]*\) .*,\1,'`
	newname="${SESSION_DIR}/${num} ${REPLY}"

	if [ -f "${newname}" ]; then
		echo "Names must be unique"
		read
	else
		echo "mv \"$1\" \"${newname}\""
		mv "$1" "${newname}"
	fi

	if [ $kittytabs ]; then
		name=`basename "${newname}"`
		kitty @ set-tab-title "${name}"

		export PMUX_SESSION="${newname}"
	fi
}

function openKittyTab() {
	name=`basename "$1"`
	OPTS="--type=tab --copy-env --location last"

	if [[ ! $2 ]]; then
		OPTS="${OPTS} --keep-focus"
	fi

	echo "kitty @ launch ${OPTS} ${DTACH} -A \"$1\" ${DTACH_OPTS} ${SHELL}"
	kitty @ launch ${OPTS} --tab-title "${name}"	\
		--env PMUX_NAME="${PMUX_NAME}"				\
		--env PMUX_SESSION="$1"						\
		--env PMUX_PWD="$PMUX_PWD"					\
		${DTACH} -A "$1" ${DTACH_OPTS} ${SHELL}
}

while [[ "$1" == "--"* ]]; do
	arg="$1"
	shift

	case "$arg" in
		--kitty)
			if [ "x" != "x${SSH_TTY}" ]; then
				echo "Unable to use kitty tabs with ssh"
				exit 1
			fi

			# Enable kitty tabs
			kittytabs=1
			;;

		--kitty-create-tab)
			kittycreatetab=1
			;;

		--kitty-rename-tab)
			kittyrenametab=1
			;;

		*)
			echo "Unknown argument: $arg"
			exit 1
	esac
done

# Start a group of dtach sesssions

if [[ "x" == "x${PMUX_NAME}" ]]; then
	PMUX_NAME=$1
	shift
fi

if [[ "x" == "x${PMUX_NAME}" ]]; then
	echo "Usage: $0 <name> [<new session command>]"
	exit 1
fi
export PMUX_NAME

if [ "x" == "x${PMUX_PWD}" ]; then
	export PMUX_PWD="${PWD}"
fi

# Set the directory so future commands can access it
export SESSION_DIR=~/.pmux/${PMUX_NAME}
mkdir -p "${SESSION_DIR}"

index=0
last=0
path=$(getSession $index)
count=$?

# If there are no sessions in the directory then create the default set
if (( count == 0 )); then
	if (( $# > 0 )); then
		$@
		index=$?
		path=$(getSession $index)
		count=$?
	fi
fi

if [ $kittytabs ]; then
	# Create a tab in kitty for each session in the directory, and let kitty
	# manage the tabs. This script does not need to continue running since kitty
	# will manage the tabs.

	firstpath=
	count=0

	for f in "${SESSION_DIR}"/*; do
		[ -S "$f" ] || continue

		if [ "x" == "x${firstpath}" ]; then
			firstpath="$f"
		else
			if ((count == index)); then
				openKittyTab "$f" 1
			else
				openKittyTab "$f"
			fi
		fi
		count=$((count+1))
	done

	if [ "x" == "x${firstpath}" ]; then
		# Create the first session
		firstpath="${SESSION_DIR}/00 -"
	fi

	# Set the title of this tab
	name=`basename "${firstpath}"`
	kitty @ set-tab-title "${name}"

	# This tab now becomes the first session
	export PMUX_SESSION="${firstpath}"
	echo "${DTACH} -A \"${firstpath}\" ${DTACH_OPTS} ${SHELL}"
	exec ${DTACH} -A "${firstpath}" ${DTACH_OPTS} ${SHELL}
elif [ $kittycreatetab ]; then
	# Just create a new tab
	printf -v num "%02d" $count
	path="${SESSION_DIR}/${num} -"

	# Start dtach for the new tab without attaching so the PWD will be set when
	# the tab does attach to it. This is a workaround for not being able to set
	# the dir when kitty starts the tab.
	(
		cd "$PMUX_PWD"
		${DTACH} -n "${path}" ${DTACH_OPTS} $SHELL
	)

	openKittyTab "${path}" 1
	exit 0
elif [ $kittyrenametab ]; then
	# Rename the session runing in the kitty tab
	kittytabs=1

	if [ "x" == "x${PMUX_SESSION}" ]; then
		echo "PMUX_SESSION must be set to use this"
		exit 1
	fi

	# TODO  The environment variable needs to be updated as well so that a 2nd
	#		rename works... There doesn't seem to be an obvious way to do this
	#		with kitty right now. The tab will get renamed but the session will
	#		not be.
	renameSession "${PMUX_SESSION}"
	exit $?
fi

while true; do
	if (( index >= count )); then
		printf -v num "%02d" $index
		path="${SESSION_DIR}/${num} -"
		count=$((count+1))
	else
		path=$(getSession $index)
		count=$?
	fi

	echo "${DTACH} -A \"${path}\" ${DTACH_OPTS} ${SHELL}"
	${DTACH} -A "${path}" ${DTACH_OPTS} ${SHELL}

	if [ ! -S "${path}" ]; then
		# A session has ended, don't try to read input.
		if (( count <= 1)); then
			# The session that ended was the last session
			echo "Closing pmux session"
			exit 0
		fi

		if (( index > 0)); then
			index=$((index-1))
		else
			index=0
		fi
	else
		clear
		echo "pmux: Next|Prev|Alternate|Create|Detach"
		echo
		i=0
		for f in "${SESSION_DIR}"/*; do
			[ -S "$f" ] || continue

			if (( i == index )); then
				echo -en "*"
			else
				echo -en " "
			fi
			basename "$f"
			i=$((i+1))
		done
		echo

		read -s -n1
		case "${REPLY}" in
			n)
				#next
				last=$index
				index=$((index+1))
				if (( index >= count )); then
					index=0
				fi
				;;
			p)
				# prev
				last=$index
				index=$((index-1))
				if (( index < 0 )); then
					index=$((count-1))
				fi
				;;
			c)
				# create
				last=$index
				index=$count
				;;

			0|1|2|3|4|5|6|7|8|9)
				if (( REPLY < count )); then
					last=$index
					index=${REPLY}
				fi
				;;

			# TODO shift+numbers

			d)
				# Detach
				exit 0
				;;

			.)
				# rename
				renameSession "${path}"
				;;

			\?)
				(
					echo "n         next window"
					echo "p         prev window"
					echo "a         last active window"
					echo "c         create a new window"
					echo "d         detach"
					echo "0-9       jump to a specific window"
					echo
					echo "Sessions:"
					ls "${SESSION_DIR}"
				) | less
				;;

			"")
				;;

			a|*)
				# Last
				tmp=$last
				last=$index
				index=$tmp
				;;
		esac
	fi
done

